-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.actores_reparto
(
    actores_reparto_id integer NOT NULL,
    nombre_actor text COLLATE pg_catalog."default" NOT NULL,
    rol text COLLATE pg_catalog."default" NOT NULL,
    fecha_nacimiento date NOT NULL,
    CONSTRAINT actores_reparto_pkey PRIMARY KEY (actores_reparto_id)
);

CREATE TABLE IF NOT EXISTS public.episodios
(
    episodio_id integer NOT NULL,
    episodio_number integer NOT NULL,
    episodio_title text COLLATE pg_catalog."default" NOT NULL,
    fecha_emsion date NOT NULL,
    duracion time without time zone NOT NULL,
    fecha_creacion date NOT NULL,
    fecha_emision date NOT NULL,
    movie_title integer NOT NULL,
    CONSTRAINT episodios_pkey PRIMARY KEY (episodio_id)
);

CREATE TABLE IF NOT EXISTS public.estudio_de_filmacion
(
    casa_de_filmacion_id integer NOT NULL,
    nombre_casa text COLLATE pg_catalog."default" NOT NULL,
    pais text COLLATE pg_catalog."default" NOT NULL,
    fecha_creacion date NOT NULL,
    fecha_actualizacion date NOT NULL,
    CONSTRAINT estudio_de_filmacion_pkey PRIMARY KEY (casa_de_filmacion_id)
);

CREATE TABLE IF NOT EXISTS public.estudio_map
(
    id integer NOT NULL,
    movie_title_id integer NOT NULL,
    estudio_de_filmacion_id integer NOT NULL,
    CONSTRAINT estudio_map_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.genres_map
(
    id integer NOT NULL,
    movie_title_id integer NOT NULL,
    movie_genres_id integer NOT NULL,
    CONSTRAINT genres_map_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.movie_genres
(
    movie_genres_id integer NOT NULL,
    nombre text COLLATE pg_catalog."default" NOT NULL,
    tipo text COLLATE pg_catalog."default" NOT NULL,
    fecha_creacion date NOT NULL,
    fecha_actualizacion date NOT NULL,
    CONSTRAINT movie_genres_pkey PRIMARY KEY (movie_genres_id)
);

CREATE TABLE IF NOT EXISTS public.movie_ratings
(
    movie_ratings_id integer NOT NULL,
    rating_value integer NOT NULL,
    fecha_creacion date,
    fecha_actualizacion date,
    CONSTRAINT movie_ratings_pkey PRIMARY KEY (movie_ratings_id)
);

CREATE TABLE IF NOT EXISTS public.movie_titles
(
    movie_titles_id integer NOT NULL,
    titulo text COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default" NOT NULL,
    fecha_emision date NOT NULL,
    puntuacion integer NOT NULL,
    image_url text COLLATE pg_catalog."default" NOT NULL,
    fecha_creacion date NOT NULL,
    fecha_actualizacion date NOT NULL,
    CONSTRAINT movie_titles_pkey PRIMARY KEY (movie_titles_id)
);

CREATE TABLE IF NOT EXISTS public.rating_map
(
    id integer NOT NULL,
    movie_title_id integer NOT NULL,
    movie_ratings_id integer NOT NULL,
    CONSTRAINT rating_map_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    reviews_id integer NOT NULL,
    comentarios text COLLATE pg_catalog."default" NOT NULL,
    rating integer NOT NULL,
    fecha_creacion date NOT NULL,
    fecha_actualizacion date NOT NULL,
    CONSTRAINT reviews_pkey PRIMARY KEY (reviews_id)
);

CREATE TABLE IF NOT EXISTS public.user_map
(
    id integer NOT NULL,
    user_id integer NOT NULL,
    role_id integer,
    CONSTRAINT user_map_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id integer NOT NULL,
    username "char"[] NOT NULL,
    password "char"[] NOT NULL,
    email "char"[] NOT NULL,
    fecha_creacion date NOT NULL,
    fecha_actualizacion date NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public.users_roles
(
    role_id integer NOT NULL,
    role_name "char"[] NOT NULL,
    fecha_creacion date NOT NULL,
    fecha_actualizacion date NOT NULL,
    CONSTRAINT users_roles_pkey PRIMARY KEY (role_id)
);

ALTER TABLE IF EXISTS public.episodios
    ADD CONSTRAINT "FK_movie_titles_id" FOREIGN KEY (movie_title)
    REFERENCES public.movie_titles (movie_titles_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.estudio_map
    ADD CONSTRAINT "FK_estudio_de_filmacion_Id" FOREIGN KEY (estudio_de_filmacion_id)
    REFERENCES public.estudio_de_filmacion (casa_de_filmacion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.estudio_map
    ADD CONSTRAINT "FK_movie_title_id" FOREIGN KEY (movie_title_id)
    REFERENCES public.movie_titles (movie_titles_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.genres_map
    ADD CONSTRAINT "FK_movie_genres_id" FOREIGN KEY (movie_genres_id)
    REFERENCES public.movie_genres (movie_genres_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.genres_map
    ADD CONSTRAINT "FK_movie_title_id" FOREIGN KEY (movie_title_id)
    REFERENCES public.movie_titles (movie_titles_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rating_map
    ADD CONSTRAINT "FK_movie_ratings_id" FOREIGN KEY (movie_ratings_id)
    REFERENCES public.movie_ratings (movie_ratings_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rating_map
    ADD CONSTRAINT "FK_movie_title_id" FOREIGN KEY (movie_title_id)
    REFERENCES public.movie_titles (movie_titles_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_map
    ADD CONSTRAINT "FK_role_id" FOREIGN KEY (role_id)
    REFERENCES public.users_roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_map
    ADD CONSTRAINT "FK_user_id" FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;